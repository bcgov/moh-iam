{"version":3,"sources":["../../../src/app/content/moh-app-realm-account/LinkedAccountsPage.tsx"],"names":["React","withRouter","DataList","DataListItemCells","DataListCell","DataListItemRow","Label","PageSection","PageSectionVariants","Split","SplitItem","Stack","StackItem","Title","DataListItem","BitbucketIcon","CubeIcon","GitlabIcon","OpenshiftIcon","PaypalIcon","FacebookIcon","GoogleIcon","InstagramIcon","MicrosoftIcon","TwitterIcon","StackOverflowIcon","LinkedinIcon","GithubIcon","AccountServiceContext","Msg","ContentPage","LinkedAccountsPage","Component","constructor","props","context","state","linkedAccounts","unLinkedAccounts","getLinkedAccounts","doGet","then","response","console","log","data","filter","account","connected","setState","render","light","localize","makeRows","emptyRow","isLinked","isEmptyMessage","accounts","length","map","providerAlias","providerName","findIcon","displayName","label","linkedUsername","social","socialIconId","toLowerCase","includes","LinkedAccountsPagewithRouter"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\r\n\r\nimport {\r\n  DataList,\r\n  DataListItemCells,\r\n  DataListCell,\r\n  DataListItemRow,\r\n  Label,\r\n  PageSection,\r\n  PageSectionVariants,\r\n  Split,\r\n  SplitItem,\r\n  Stack,\r\n  StackItem,\r\n  Title,\r\n  DataListItem,\r\n} from \"@patternfly/react-core\";\r\n\r\nimport {\r\n  BitbucketIcon,\r\n  CubeIcon,\r\n  GitlabIcon,\r\n  OpenshiftIcon,\r\n  PaypalIcon,\r\n  FacebookIcon,\r\n  GoogleIcon,\r\n  InstagramIcon,\r\n  MicrosoftIcon,\r\n  TwitterIcon,\r\n  StackOverflowIcon,\r\n  LinkedinIcon,\r\n  GithubIcon,\r\n} from \"@patternfly/react-icons\";\r\n\r\nimport { HttpResponse } from \"../../account-service/account.service\";\r\nimport { AccountServiceContext } from \"../../account-service/AccountServiceContext\";\r\nimport { Msg } from \"../../widgets/Msg\";\r\nimport { ContentPage } from \"../ContentPage\";\r\n\r\ninterface LinkedAccount {\r\n  connected: boolean;\r\n  social: boolean;\r\n  providerAlias: string;\r\n  providerName: string;\r\n  displayName: string;\r\n  linkedUsername: string;\r\n}\r\n\r\ninterface LinkedAccountsPageProps extends RouteComponentProps {}\r\n\r\ninterface LinkedAccountsPageState {\r\n  linkedAccounts: LinkedAccount[];\r\n  unLinkedAccounts: LinkedAccount[];\r\n}\r\n\r\nclass LinkedAccountsPage extends React.Component<\r\n  LinkedAccountsPageProps,\r\n  LinkedAccountsPageState\r\n> {\r\n  static contextType = AccountServiceContext;\r\n  context: React.ContextType<typeof AccountServiceContext>;\r\n\r\n  public constructor(\r\n    props: LinkedAccountsPageProps,\r\n    context: React.ContextType<typeof AccountServiceContext>\r\n  ) {\r\n    super(props);\r\n    this.context = context;\r\n\r\n    this.state = {\r\n      linkedAccounts: [],\r\n      unLinkedAccounts: [],\r\n    };\r\n\r\n    this.getLinkedAccounts();\r\n  }\r\n\r\n  private getLinkedAccounts(): void {\r\n    this.context!.doGet<LinkedAccount[]>(\"/linked-accounts\").then(\r\n      (response: HttpResponse<LinkedAccount[]>) => {\r\n        console.log({ response });\r\n        const linkedAccounts = response.data!.filter(\r\n          (account) => account.connected\r\n        );\r\n        const unLinkedAccounts = response.data!.filter(\r\n          (account) => !account.connected\r\n        );\r\n        this.setState({\r\n          linkedAccounts: linkedAccounts,\r\n          unLinkedAccounts: unLinkedAccounts,\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  public render(): React.ReactNode {\r\n    return (\r\n      <ContentPage title=\"Federated Identities\">\r\n        <PageSection isFilled variant={PageSectionVariants.light}>\r\n          <Stack hasGutter>\r\n            <StackItem>\r\n              <Title headingLevel=\"h2\" className=\"pf-u-mb-lg\" size=\"xl\">\r\n                Linked Identity Providers\r\n              </Title>\r\n              <DataList\r\n                id=\"linked-idps\"\r\n                aria-label={Msg.localize(\"linkedLoginProviders\")}\r\n              >\r\n                {this.makeRows(this.state.linkedAccounts, true)}\r\n              </DataList>\r\n            </StackItem>\r\n            <StackItem>\r\n              <Title\r\n                headingLevel=\"h2\"\r\n                className=\"pf-u-mt-xl pf-u-mb-lg\"\r\n                size=\"xl\"\r\n              >\r\n                Unlinked Identity Providers\r\n              </Title>\r\n              <DataList\r\n                id=\"unlinked-idps\"\r\n                aria-label={Msg.localize(\"unlinkedLoginProviders\")}\r\n              >\r\n                {this.makeRows(this.state.unLinkedAccounts, false)}\r\n              </DataList>\r\n            </StackItem>\r\n          </Stack>\r\n        </PageSection>\r\n      </ContentPage>\r\n    );\r\n  }\r\n\r\n  private emptyRow(isLinked: boolean): React.ReactNode {\r\n    let isEmptyMessage = \"\";\r\n    if (isLinked) {\r\n      isEmptyMessage = Msg.localize(\"linkedEmpty\");\r\n    } else {\r\n      isEmptyMessage = Msg.localize(\"unlinkedEmpty\");\r\n    }\r\n\r\n    return (\r\n      <DataListItem\r\n        key=\"emptyItem\"\r\n        aria-labelledby={Msg.localize(\"isEmptyMessage\")}\r\n      >\r\n        <DataListItemRow key=\"emptyRow\">\r\n          <DataListItemCells\r\n            dataListCells={[\r\n              <DataListCell key=\"empty\">{isEmptyMessage}</DataListCell>,\r\n            ]}\r\n          />\r\n        </DataListItemRow>\r\n      </DataListItem>\r\n    );\r\n  }\r\n\r\n  private makeRows(\r\n    accounts: LinkedAccount[],\r\n    isLinked: boolean\r\n  ): React.ReactNode {\r\n    if (accounts.length === 0) {\r\n      return this.emptyRow(isLinked);\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {\" \"}\r\n        {accounts.map((account: LinkedAccount) => (\r\n          <DataListItem\r\n            id={`${account.providerAlias}-idp`}\r\n            key={account.providerName}\r\n            aria-labelledby={Msg.localize(\"linkedAccountsTitle\")}\r\n          >\r\n            <DataListItemRow key={account.providerName}>\r\n              <DataListItemCells\r\n                dataListCells={[\r\n                  <DataListCell key=\"idp\">\r\n                    <Split>\r\n                      <SplitItem className=\"pf-u-mr-sm\">\r\n                        {this.findIcon(account)}\r\n                      </SplitItem>\r\n                      <SplitItem className=\"pf-u-my-xs\" isFilled>\r\n                        <span id={`${account.providerAlias}-idp-name`}>\r\n                          {account.displayName}\r\n                        </span>\r\n                      </SplitItem>\r\n                    </Split>\r\n                  </DataListCell>,\r\n                  <DataListCell key=\"label\">\r\n                    <Split>\r\n                      <SplitItem className=\"pf-u-my-xs\" isFilled>\r\n                        <span id={`${account.providerAlias}-idp-label`}>\r\n                          {this.label(account)}\r\n                        </span>\r\n                      </SplitItem>\r\n                    </Split>\r\n                  </DataListCell>,\r\n                  <DataListCell key=\"username\" width={5}>\r\n                    <Split>\r\n                      <SplitItem className=\"pf-u-my-xs\" isFilled>\r\n                        <span id={`${account.providerAlias}-idp-username`}>\r\n                          {account.linkedUsername}\r\n                        </span>\r\n                      </SplitItem>\r\n                    </Split>\r\n                  </DataListCell>,\r\n                ]}\r\n              />\r\n            </DataListItemRow>\r\n          </DataListItem>\r\n        ))}{\" \"}\r\n      </>\r\n    );\r\n  }\r\n\r\n  private label(account: LinkedAccount): React.ReactNode {\r\n    if (account.social) {\r\n      return (\r\n        <Label color=\"blue\">\r\n          <Msg msgKey=\"socialLogin\" />\r\n        </Label>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Label color=\"green\">\r\n        <Msg msgKey=\"systemDefined\" />\r\n      </Label>\r\n    );\r\n  }\r\n\r\n  private findIcon(account: LinkedAccount): React.ReactNode {\r\n    const socialIconId = `${account.providerAlias}-idp-icon-social`;\r\n    console.log(account);\r\n    switch (true) {\r\n      case account.providerName.toLowerCase().includes(\"linkedin\"):\r\n        return <LinkedinIcon id={socialIconId} size=\"lg\" />;\r\n      case account.providerName.toLowerCase().includes(\"facebook\"):\r\n        return <FacebookIcon id={socialIconId} size=\"lg\" />;\r\n      case account.providerName.toLowerCase().includes(\"google\"):\r\n        return <GoogleIcon id={socialIconId} size=\"lg\" />;\r\n      case account.providerName.toLowerCase().includes(\"instagram\"):\r\n        return <InstagramIcon id={socialIconId} size=\"lg\" />;\r\n      case account.providerName.toLowerCase().includes(\"microsoft\"):\r\n        return <MicrosoftIcon id={socialIconId} size=\"lg\" />;\r\n      case account.providerName.toLowerCase().includes(\"bitbucket\"):\r\n        return <BitbucketIcon id={socialIconId} size=\"lg\" />;\r\n      case account.providerName.toLowerCase().includes(\"twitter\"):\r\n        return <TwitterIcon id={socialIconId} size=\"lg\" />;\r\n      case account.providerName.toLowerCase().includes(\"openshift\"):\r\n        // return <div className=\"idp-icon-social\" id=\"openshift-idp-icon-social\" />;\r\n        return <OpenshiftIcon id={socialIconId} size=\"lg\" />;\r\n      case account.providerName.toLowerCase().includes(\"gitlab\"):\r\n        return <GitlabIcon id={socialIconId} size=\"lg\" />;\r\n      case account.providerName.toLowerCase().includes(\"github\"):\r\n        return <GithubIcon id={socialIconId} size=\"lg\" />;\r\n      case account.providerName.toLowerCase().includes(\"paypal\"):\r\n        return <PaypalIcon id={socialIconId} size=\"lg\" />;\r\n      case account.providerName.toLowerCase().includes(\"stackoverflow\"):\r\n        return <StackOverflowIcon id={socialIconId} size=\"lg\" />;\r\n      case account.providerName !== \"\" && account.social:\r\n        return <div className=\"idp-icon-social\" id={socialIconId} />;\r\n      default:\r\n        return (\r\n          <CubeIcon\r\n            id={`${account.providerAlias}-idp-icon-default`}\r\n            size=\"lg\"\r\n          />\r\n        );\r\n    }\r\n  }\r\n}\r\n\r\nconst LinkedAccountsPagewithRouter = withRouter(LinkedAccountsPage);\r\nexport { LinkedAccountsPagewithRouter as LinkedAccountsPage };\r\n"],"file":"LinkedAccountsPage.js"}